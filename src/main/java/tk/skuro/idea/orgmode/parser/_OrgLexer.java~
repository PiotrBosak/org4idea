// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Org.flex

package tk.skuro.idea.orgmode.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static tk.skuro.idea.orgmode.parser.OrgTokenTypes.*;

// TODO: see if could reuse org lexer src/org_lexer.l


class _OrgLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK = 2;
  public static final int PROPERTIES = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\2\0\1\7\6\0\1\10\1\11\16\0\1\12\7\0"+
    "\1\13\1\0\1\14\1\15\1\0\1\16\1\0\1\17"+
    "\4\0\1\20\1\21\1\22\1\0\1\23\1\24\1\25"+
    "\12\0\1\26\45\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\2\1\1\2\1\3\1\4"+
    "\1\1\7\5\5\6\2\0\2\3\4\0\1\3\1\7"+
    "\1\0\1\2\1\0\1\3\1\2\1\0\1\3\1\2"+
    "\3\0\2\3\1\10\2\0\1\3\1\0\2\3\3\0"+
    "\1\3\3\0\2\3\3\0\1\11\2\3\2\0\1\3"+
    "\3\0\2\3\1\12\2\0\2\11\2\3\2\0\1\3"+
    "\1\13\2\0\2\3\2\0\2\3\2\0\1\3\2\0"+
    "\1\3\1\12\2\0\1\3\1\12\2\0\1\14\1\0"+
    "\1\3\1\0\1\3\2\0\1\15\1\0\1\15\3\0"+
    "\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\u0142\0\163"+
    "\0\u0159\0\u0170\0\317\0\346\0\u0187\0\u019e\0\163\0\u01b5"+
    "\0\u0170\0\317\0\u01cc\0\u01e3\0\346\0\u01fa\0\u0211\0\u0228"+
    "\0\u023f\0\u0256\0\u0142\0\u026d\0\u0284\0\u029b\0\u0159\0\u02b2"+
    "\0\u02c9\0\u0187\0\u02e0\0\u02f7\0\u01b5\0\u01cc\0\u030e\0\u0325"+
    "\0\u033c\0\u0353\0\u0228\0\u036a\0\u0381\0\u0398\0\u03af\0\u03c6"+
    "\0\u03dd\0\u03f4\0\u040b\0\u0422\0\u0439\0\u0450\0\u0467\0\u047e"+
    "\0\u0495\0\u04ac\0\u04c3\0\u04da\0\u04f1\0\u0508\0\u051f\0\u0536"+
    "\0\u054d\0\u0564\0\u057b\0\u0592\0\u05a9\0\u05c0\0\u05d7\0\u05ee"+
    "\0\163\0\u0605\0\u061c\0\163\0\u0633\0\u064a\0\u0661\0\u0678"+
    "\0\u068f\0\u06a6\0\163\0\u06bd\0\u06d4\0\u06eb\0\u0702\0\u0719"+
    "\0\u0730\0\u0747\0\u075e\0\u0775\0\u078c\0\u07a3\0\u07ba\0\u0702"+
    "\0\u07d1\0\u0702\0\u07e8\0\u075e\0\u07ff\0\u075e\0\u0816\0\u07a3"+
    "\0\u07a3\0\u082d\0\u0844\0\u085b\0\u0872\0\u0889\0\u0844\0\u0844"+
    "\0\u0872\0\u0872\0\u08a0\0\u08b7\0\u08ce\0\163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\0\2\10\1\7\1\11\1\12"+
    "\1\6\1\13\15\6\1\14\1\10\1\0\2\10\1\14"+
    "\1\15\1\16\1\6\1\17\14\6\1\20\1\21\1\10"+
    "\1\0\2\10\1\21\1\22\1\23\1\20\1\24\15\20"+
    "\1\25\1\10\1\0\2\10\1\25\1\26\1\23\1\20"+
    "\1\24\14\20\1\27\1\30\1\10\1\0\2\10\1\30"+
    "\1\31\1\32\1\27\1\33\14\27\30\0\1\7\1\10"+
    "\1\0\2\10\1\7\1\34\2\0\1\35\15\0\2\10"+
    "\1\0\3\10\20\0\2\36\4\0\3\36\1\37\15\36"+
    "\2\40\1\0\2\40\1\0\21\40\15\0\1\41\12\0"+
    "\1\14\1\10\1\0\2\10\1\14\1\42\2\0\1\43"+
    "\14\0\2\36\4\0\3\36\1\44\15\36\2\16\1\0"+
    "\1\16\1\40\1\0\21\16\6\0\1\45\6\0\1\41"+
    "\4\0\1\46\5\0\1\47\1\10\1\0\2\10\1\47"+
    "\1\50\2\0\1\35\14\0\2\36\4\0\3\36\1\51"+
    "\15\36\1\0\1\52\1\10\1\0\2\10\1\52\1\53"+
    "\2\0\1\35\14\0\2\36\4\0\3\36\1\54\15\36"+
    "\1\0\1\55\1\10\1\0\2\10\1\55\1\50\2\0"+
    "\1\56\31\0\1\57\22\0\1\60\15\0\2\36\4\0"+
    "\23\36\4\0\5\36\1\61\1\36\1\62\11\36\2\40"+
    "\1\0\2\40\1\0\2\40\1\63\16\40\20\0\1\64"+
    "\17\0\1\65\15\0\2\66\1\0\1\67\2\0\5\66"+
    "\1\70\1\66\1\71\11\66\2\45\1\0\1\45\2\0"+
    "\21\45\23\0\1\72\14\0\1\73\15\0\2\36\4\0"+
    "\7\36\1\62\11\36\11\0\1\74\15\0\2\36\4\0"+
    "\7\36\1\75\11\36\20\0\1\76\21\0\1\77\1\0"+
    "\1\100\11\0\2\36\4\0\7\36\1\101\13\36\4\0"+
    "\12\36\1\102\6\36\14\0\1\103\12\0\2\67\1\0"+
    "\1\67\2\0\5\67\1\104\1\67\1\105\11\67\2\66"+
    "\1\0\1\67\2\0\4\66\1\106\14\66\2\67\1\0"+
    "\1\67\2\0\4\67\1\106\14\67\2\66\1\0\1\67"+
    "\2\0\4\66\1\106\2\66\1\107\13\66\1\0\1\67"+
    "\2\0\4\66\1\106\5\66\1\110\6\66\21\0\1\111"+
    "\22\0\1\100\26\0\1\112\11\0\2\36\4\0\12\36"+
    "\1\113\6\36\14\0\1\114\27\0\1\115\31\0\1\116"+
    "\6\0\2\36\4\0\10\36\1\117\12\36\4\0\6\36"+
    "\1\120\12\36\12\0\1\121\14\0\2\67\1\0\1\67"+
    "\2\0\4\67\1\106\2\67\1\122\13\67\1\0\1\67"+
    "\2\0\4\67\1\106\5\67\1\123\6\67\2\106\1\124"+
    "\1\106\1\0\1\125\21\106\2\66\1\0\1\67\2\0"+
    "\4\66\1\106\3\66\1\126\12\66\1\0\1\67\2\0"+
    "\4\66\1\106\1\66\1\127\12\66\22\0\1\130\24\0"+
    "\1\131\6\0\2\36\4\0\6\36\1\132\12\36\12\0"+
    "\1\133\32\0\1\134\24\0\1\135\12\0\2\36\4\0"+
    "\11\36\1\136\11\36\4\0\20\36\1\137\2\67\1\0"+
    "\1\67\2\0\4\67\1\106\3\67\1\140\12\67\1\0"+
    "\1\67\2\0\4\67\1\106\1\67\1\141\12\67\2\0"+
    "\1\124\24\0\2\66\1\0\1\67\2\0\4\66\1\106"+
    "\4\66\1\142\11\66\1\0\1\67\2\0\4\66\1\106"+
    "\13\66\1\143\15\0\1\144\25\0\1\145\12\0\2\36"+
    "\4\0\20\36\1\146\17\0\1\147\35\0\1\150\2\36"+
    "\4\0\12\36\1\151\6\36\2\152\1\0\1\152\2\0"+
    "\21\152\2\67\1\0\1\67\2\0\4\67\1\106\4\67"+
    "\1\153\11\67\1\0\1\67\2\0\4\67\1\106\13\67"+
    "\1\154\2\66\1\0\1\67\2\0\4\66\1\106\5\66"+
    "\1\155\6\66\2\156\1\0\1\156\2\0\4\156\1\106"+
    "\14\156\23\0\1\157\31\0\1\160\2\161\1\0\1\161"+
    "\2\0\21\161\20\0\1\162\6\0\2\36\4\0\20\36"+
    "\1\163\2\67\1\0\1\67\2\0\4\67\1\106\5\67"+
    "\1\164\6\67\2\66\1\0\1\67\2\0\4\66\1\106"+
    "\13\66\1\165\25\0\1\166\27\0\1\167\2\170\1\0"+
    "\1\170\2\0\21\170\2\67\1\0\1\67\2\0\4\67"+
    "\1\106\13\67\1\171\2\172\1\0\1\172\2\0\4\172"+
    "\1\106\14\172\17\0\1\173\24\0\1\174\35\0\1\175"+
    "\14\0\1\176\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2277];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\11\1\1\11\6\1\1\11\4\1\2\0"+
    "\2\1\4\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\3\0\3\1\2\0\1\1\1\0\2\1\3\0"+
    "\1\1\3\0\2\1\3\0\3\1\2\0\1\1\3\0"+
    "\2\1\1\11\2\0\1\11\3\1\2\0\1\1\1\11"+
    "\2\0\2\1\2\0\2\1\2\0\1\1\2\0\2\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _OrgLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TEXT;
            }
          // fall through
          case 15: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 17: break;
          case 4:
            { yybegin(YYINITIAL); return OUTLINE;
            }
          // fall through
          case 18: break;
          case 5:
            { return BLOCK_CONTENT;
            }
          // fall through
          case 19: break;
          case 6:
            { return DRAWER_CONTENT;
            }
          // fall through
          case 20: break;
          case 7:
            { yybegin(YYINITIAL); return CODE;
            }
          // fall through
          case 21: break;
          case 8:
            { return BOLD;
            }
          // fall through
          case 22: break;
          case 9:
            { yybegin(YYINITIAL); return KEYWORD;
            }
          // fall through
          case 23: break;
          case 10:
            { return UNMATCHED_DELIMITER;
            }
          // fall through
          case 24: break;
          case 11:
            { yybegin(YYINITIAL); return DRAWER_DELIMITER;
            }
          // fall through
          case 25: break;
          case 12:
            { yybegin(YYINITIAL); return BLOCK_END;
            }
          // fall through
          case 26: break;
          case 13:
            { yybegin(BLOCK); return BLOCK_START;
            }
          // fall through
          case 27: break;
          case 14:
            { yybegin(PROPERTIES); return DRAWER_DELIMITER;
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
