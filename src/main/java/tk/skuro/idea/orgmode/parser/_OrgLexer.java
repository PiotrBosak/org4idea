/* The following code was generated by JFlex 1.4.3 on 3/29/16 1:06 PM */

package tk.skuro.idea.orgmode.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static tk.skuro.idea.orgmode.parser.OrgTokenTypes.*;

// TODO: see if could reuse org lexer src/org_lexer.l


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/29/16 1:06 PM from the specification file
 * <tt>/Users/skuro/Development/Sandbox/org4idea/src/main/java/tk/skuro/idea/orgmode/parser/Org.flex</tt>
 */
class _OrgLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PROPERTIES = 4;
  public static final int BLOCK = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\10\1\0\1\1\1\5\22\0\1\4\2\0\1\3"+
    "\6\0\1\11\1\6\16\0\1\12\7\0\1\13\1\0\1\20\1\14"+
    "\1\0\1\15\1\0\1\16\4\0\1\17\1\23\1\21\1\0\1\22"+
    "\1\25\1\24\12\0\1\7\uffa0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\1\2\2\3\1\6\3\6\4"+
    "\1\0\1\5\1\0\1\6\3\0\1\7\1\0\1\10"+
    "\1\6\1\11\1\0\1\2\2\0\1\2\2\0\2\12"+
    "\3\0\1\12\3\0\1\12\2\0\1\13\1\12\2\0"+
    "\1\12\1\0\1\14\1\12\1\0\1\15\3\0\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[71];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\156\0\204"+
    "\0\232\0\260\0\u0134\0\u014a\0\156\0\204\0\u0160\0\232"+
    "\0\260\0\u0176\0\232\0\232\0\260\0\260\0\u018c\0\362"+
    "\0\u011e\0\u01a2\0\u01b8\0\u01ce\0\u0108\0\u01e4\0\u01fa\0\u0134"+
    "\0\u014a\0\u0210\0\u0160\0\u0176\0\u0226\0\u023c\0\u0252\0\u0268"+
    "\0\u027e\0\u0294\0\u02aa\0\u02c0\0\u02d6\0\u02ec\0\u0302\0\u0318"+
    "\0\u032e\0\156\0\u0344\0\u035a\0\u0370\0\u0386\0\u039c\0\u03b2"+
    "\0\u03c8\0\u03de\0\u03f4\0\u040a\0\u0420\0\u0436\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[71];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\6\2\7\1\6\1\10\1\7\1\11"+
    "\15\6\1\12\1\13\1\14\1\13\1\12\1\6\1\10"+
    "\1\12\1\15\1\16\13\6\1\17\2\20\1\17\2\20"+
    "\1\17\1\21\1\7\1\22\15\17\1\20\1\23\1\24"+
    "\1\23\1\20\1\17\1\21\1\7\1\22\14\17\1\25"+
    "\1\26\1\27\1\25\1\27\1\26\1\25\1\30\1\7"+
    "\1\31\1\32\13\25\27\0\2\7\1\0\2\7\2\0"+
    "\1\7\15\0\7\33\1\34\1\0\15\33\10\35\1\0"+
    "\1\36\14\35\1\0\2\12\1\0\2\12\2\0\1\12"+
    "\1\0\1\37\14\0\1\12\1\13\1\40\1\13\1\12"+
    "\2\0\1\12\1\0\1\41\17\0\1\42\1\0\1\43"+
    "\17\0\1\35\2\44\1\35\1\44\3\35\1\0\1\45"+
    "\14\35\4\0\1\46\14\0\1\47\5\0\1\7\1\50"+
    "\1\51\1\50\1\7\2\0\1\7\23\0\1\52\20\0"+
    "\1\7\1\53\1\0\1\53\1\7\2\0\1\7\1\0"+
    "\1\54\27\0\1\55\32\0\1\47\4\0\5\42\1\0"+
    "\2\42\1\0\15\42\5\56\1\0\2\56\1\0\2\56"+
    "\1\57\12\56\5\44\1\35\2\44\1\0\15\44\5\46"+
    "\1\0\2\46\1\0\15\46\22\0\1\60\17\0\1\61"+
    "\30\0\1\62\6\0\5\56\1\0\2\56\1\0\22\56"+
    "\1\0\2\56\1\0\3\56\1\63\11\56\23\0\1\64"+
    "\21\0\1\65\26\0\1\66\5\0\5\56\1\0\2\56"+
    "\1\0\4\56\1\67\10\56\21\0\1\70\24\0\1\71"+
    "\17\0\1\72\13\0\5\56\1\0\2\56\1\0\5\56"+
    "\1\73\7\56\14\0\1\74\20\0\1\75\16\0\5\56"+
    "\1\0\2\56\1\0\6\56\1\76\6\56\22\0\1\77"+
    "\3\0\4\100\2\0\2\100\1\0\15\100\5\56\1\0"+
    "\1\56\1\101\1\0\15\56\24\0\1\102\1\0\5\100"+
    "\1\0\2\100\1\0\15\100\4\103\1\56\1\0\2\103"+
    "\1\0\15\103\16\0\1\104\7\0\5\103\1\0\2\103"+
    "\1\0\15\103\14\0\1\105\36\0\1\106\12\0\1\107"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\10\1\1\11\5\1\1\11\5\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\1\2\0\2\1\3\0\1\1\3\0"+
    "\1\1\2\0\1\11\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[71];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _OrgLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 70) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return WHITE_SPACE;
          }
        case 15: break;
        case 8: 
          { yybegin(YYINITIAL); return OUTLINE;
          }
        case 16: break;
        case 9: 
          { yybegin(YYINITIAL); return CODE;
          }
        case 17: break;
        case 13: 
          { yybegin(BLOCK); return BLOCK_DELIMITER;
          }
        case 18: break;
        case 12: 
          { yybegin(YYINITIAL); return BLOCK_DELIMITER;
          }
        case 19: break;
        case 10: 
          { yybegin(YYINITIAL); return KEYWORD;
          }
        case 20: break;
        case 11: 
          { yybegin(YYINITIAL); return DRAWER_DELIMITER;
          }
        case 21: break;
        case 6: 
          { return BOLD;
          }
        case 22: break;
        case 1: 
          { return TEXT;
          }
        case 23: break;
        case 3: 
          { return BLOCK_CONTENT;
          }
        case 24: break;
        case 5: 
          { return UNDERLINE;
          }
        case 25: break;
        case 7: 
          { yybegin(YYINITIAL); return COMMENT;
          }
        case 26: break;
        case 4: 
          { return DRAWER_CONTENT;
          }
        case 27: break;
        case 14: 
          { yybegin(PROPERTIES); return DRAWER_DELIMITER;
          }
        case 28: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
