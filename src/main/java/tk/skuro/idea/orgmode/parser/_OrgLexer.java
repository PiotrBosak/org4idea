/* The following code was generated by JFlex 1.4.3 on 8/8/16 8:23 PM */

package tk.skuro.idea.orgmode.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static tk.skuro.idea.orgmode.parser.OrgTokenTypes.*;

// TODO: see if could reuse org lexer src/org_lexer.l


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/8/16 8:23 PM from the specification file
 * <tt>/Users/skuro/Development/Sandbox/org4idea/src/main/java/tk/skuro/idea/orgmode/parser/Org.flex</tt>
 */
class _OrgLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PROPERTIES = 4;
  public static final int BLOCK = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\4\1\2\22\0\1\13\2\0\1\6"+
    "\6\0\1\12\1\7\16\0\1\10\7\0\1\14\1\0\1\21\1\15"+
    "\1\0\1\16\1\0\1\17\4\0\1\20\1\24\1\22\1\0\1\23"+
    "\1\26\1\25\12\0\1\11\1\0\1\5\uff9e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\3\1\1\2\1\3\1\1"+
    "\1\4\11\5\7\6\2\0\2\3\2\0\1\7\3\0"+
    "\1\3\1\10\1\0\1\2\1\0\1\3\1\2\1\0"+
    "\1\3\1\2\3\0\2\3\1\0\1\11\1\0\3\3"+
    "\3\0\1\3\3\0\2\3\4\0\1\12\2\3\2\0"+
    "\1\3\3\0\2\3\1\13\1\12\2\0\2\12\2\3"+
    "\2\0\1\3\1\14\2\0\2\3\1\12\2\0\2\3"+
    "\2\0\1\3\2\0\1\3\1\13\2\0\1\3\1\13"+
    "\2\0\1\15\1\0\1\13\1\3\1\0\1\13\1\3"+
    "\1\0\1\15\1\0\1\16\1\0\1\16\1\0\2\16"+
    "\2\0\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\u0142\0\u0159"+
    "\0\163\0\212\0\u0170\0\u0187\0\317\0\346\0\375\0\u019e"+
    "\0\u01b5\0\163\0\212\0\u01cc\0\u0187\0\u01e3\0\346\0\375"+
    "\0\u01fa\0\317\0\u0211\0\u0228\0\u023f\0\346\0\346\0\u0256"+
    "\0\u026d\0\u0142\0\u0284\0\u029b\0\u02b2\0\u0170\0\u02c9\0\u02e0"+
    "\0\u019e\0\u02f7\0\u030e\0\u01cc\0\u01e3\0\u0325\0\u033c\0\u0353"+
    "\0\u036a\0\u0381\0\u0256\0\u0398\0\u03af\0\u03c6\0\u03dd\0\u03f4"+
    "\0\u040b\0\u0422\0\u0439\0\u0450\0\u0467\0\u047e\0\u0495\0\u04ac"+
    "\0\u04c3\0\u04da\0\u04f1\0\u0508\0\u051f\0\u0536\0\u054d\0\u0564"+
    "\0\u057b\0\u0592\0\u05a9\0\u05c0\0\u05d7\0\u05ee\0\u0605\0\163"+
    "\0\u061c\0\u0633\0\u064a\0\163\0\u0661\0\u0678\0\u068f\0\u06a6"+
    "\0\u06bd\0\u06d4\0\163\0\u06eb\0\u0702\0\u0719\0\u0730\0\u0747"+
    "\0\u075e\0\u0775\0\u078c\0\u07a3\0\u07ba\0\u07d1\0\u07e8\0\u07ff"+
    "\0\u0816\0\u082d\0\u0730\0\u0844\0\u085b\0\u0872\0\u07a3\0\u0889"+
    "\0\u08a0\0\u07e8\0\u08b7\0\u0816\0\u08ce\0\u08e5\0\u085b\0\u08fc"+
    "\0\u0913\0\u08a0\0\u092a\0\u08ce\0\u0941\0\u08fc\0\u0958\0\u092a"+
    "\0\u0941\0\u096f\0\u0986\0\163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\7\1\6\1\11\1\6\1\12"+
    "\1\13\1\14\1\10\14\6\2\7\1\15\1\7\1\6"+
    "\1\16\1\6\1\17\1\13\1\20\1\15\13\6\1\21"+
    "\1\7\1\22\1\23\1\22\1\21\1\24\1\21\1\25"+
    "\1\26\1\27\1\23\14\21\1\7\1\22\1\30\1\22"+
    "\1\21\1\31\1\21\1\25\1\26\1\27\1\30\13\21"+
    "\1\32\1\7\1\33\1\34\1\33\1\32\1\35\1\32"+
    "\1\36\1\37\1\40\1\34\13\32\30\0\4\7\6\0"+
    "\1\7\14\0\2\7\1\10\1\7\1\0\1\41\1\0"+
    "\1\42\2\0\1\10\13\0\1\43\1\0\5\43\1\44"+
    "\17\43\15\0\1\45\11\0\1\46\2\0\6\46\1\47"+
    "\15\46\1\50\2\0\24\50\1\0\2\7\1\15\1\7"+
    "\1\0\1\51\1\0\1\52\2\0\1\15\13\0\1\43"+
    "\1\0\5\43\1\53\17\43\13\0\1\54\1\0\1\45"+
    "\4\0\1\55\4\0\1\20\2\0\1\20\2\50\21\20"+
    "\1\0\2\7\1\56\1\7\1\0\1\57\1\0\1\42"+
    "\2\0\1\56\13\0\1\43\1\0\5\43\1\60\17\43"+
    "\1\0\2\7\1\61\1\7\1\0\1\62\1\0\1\42"+
    "\2\0\1\61\13\0\1\43\1\0\5\43\1\63\17\43"+
    "\1\0\2\7\1\64\1\7\1\0\1\57\1\0\1\65"+
    "\2\0\1\64\30\0\1\66\20\0\1\67\17\0\1\43"+
    "\1\0\26\43\1\0\12\43\1\70\1\71\11\43\20\0"+
    "\1\72\6\0\1\50\2\0\7\50\1\73\14\50\7\0"+
    "\1\74\17\0\1\75\1\0\1\43\1\75\2\43\6\75"+
    "\1\76\1\77\11\75\1\54\2\0\1\54\2\0\21\54"+
    "\23\0\1\100\12\0\1\101\17\0\1\43\1\0\13\43"+
    "\1\71\11\43\7\0\1\102\17\0\1\43\1\0\13\43"+
    "\1\103\11\43\20\0\1\104\22\0\1\105\1\106\11\0"+
    "\1\43\1\0\13\43\1\107\12\43\1\0\16\43\1\110"+
    "\6\43\21\0\1\111\5\0\1\112\2\0\1\112\2\0"+
    "\6\112\1\113\1\114\11\112\1\75\1\0\1\43\1\75"+
    "\2\43\2\75\1\115\17\75\1\0\1\43\1\75\2\43"+
    "\2\75\1\115\4\75\1\116\12\75\1\0\1\43\1\75"+
    "\2\43\2\75\1\115\7\75\1\117\6\75\24\0\1\120"+
    "\17\0\1\106\26\0\1\121\11\0\1\43\1\0\16\43"+
    "\1\122\6\43\21\0\1\123\22\0\1\124\31\0\1\125"+
    "\6\0\1\43\1\0\14\43\1\126\11\43\1\0\17\43"+
    "\1\127\5\43\10\0\1\130\16\0\1\112\2\0\1\112"+
    "\2\0\2\112\1\131\17\112\2\0\1\112\2\0\2\112"+
    "\1\131\4\112\1\132\12\112\2\0\1\112\2\0\2\112"+
    "\1\131\7\112\1\133\6\112\1\115\1\134\1\135\1\115"+
    "\2\43\21\115\1\75\1\0\1\43\1\75\2\43\2\75"+
    "\1\115\5\75\1\136\11\75\1\0\1\43\1\75\2\43"+
    "\2\75\1\115\10\75\1\137\5\75\22\0\1\140\24\0"+
    "\1\141\6\0\1\43\1\0\17\43\1\142\5\43\10\0"+
    "\1\143\34\0\1\144\31\0\1\145\5\0\1\43\1\0"+
    "\15\43\1\146\10\43\1\0\7\43\1\147\15\43\1\131"+
    "\1\134\1\150\1\131\2\0\21\131\1\112\2\0\1\112"+
    "\2\0\2\112\1\131\5\112\1\151\11\112\2\0\1\112"+
    "\2\0\2\112\1\131\10\112\1\152\5\112\1\43\1\134"+
    "\25\43\1\75\1\0\1\43\1\75\2\43\2\75\1\115"+
    "\6\75\1\153\10\75\1\0\1\43\1\75\2\43\2\75"+
    "\1\115\1\154\15\75\15\0\1\155\32\0\1\156\5\0"+
    "\1\43\1\0\7\43\1\157\15\43\17\0\1\160\20\0"+
    "\1\161\15\0\1\43\1\0\16\43\1\162\6\43\1\163"+
    "\1\0\1\43\1\163\2\43\21\163\1\0\1\134\25\0"+
    "\1\112\2\0\1\112\2\0\2\112\1\131\6\112\1\164"+
    "\10\112\2\0\1\112\2\0\2\112\1\131\1\165\15\112"+
    "\1\75\1\0\1\43\1\75\2\43\2\75\1\115\7\75"+
    "\1\166\6\75\1\167\1\0\1\43\1\167\2\43\2\167"+
    "\1\115\16\167\23\0\1\170\14\0\1\171\15\0\1\172"+
    "\1\0\1\43\1\172\2\43\21\172\20\0\1\173\6\0"+
    "\1\174\2\0\1\174\2\0\21\174\1\43\1\0\7\43"+
    "\1\175\15\43\1\112\2\0\1\112\2\0\2\112\1\131"+
    "\7\112\1\176\6\112\1\177\2\0\1\177\2\0\2\177"+
    "\1\131\16\177\1\75\1\0\1\43\1\75\2\43\2\75"+
    "\1\115\1\200\15\75\25\0\1\201\1\0\1\202\2\0"+
    "\1\202\2\0\21\202\11\0\1\203\15\0\1\204\1\0"+
    "\1\43\1\204\2\43\21\204\1\112\2\0\1\112\2\0"+
    "\2\112\1\131\1\205\15\112\1\206\1\0\1\43\1\206"+
    "\2\43\2\206\1\115\16\206\17\0\1\207\7\0\1\210"+
    "\2\0\1\210\2\0\21\210\1\211\2\0\1\211\2\0"+
    "\2\211\1\131\16\211\15\0\1\212\37\0\1\213\10\0"+
    "\1\214\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2461];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\12\1\1\11\10\1\1\11\6\1\2\0"+
    "\2\1\2\0\1\1\3\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\3\0\2\1\1\0\1\1\1\0"+
    "\3\1\3\0\1\1\3\0\2\1\4\0\3\1\2\0"+
    "\1\1\3\0\2\1\1\11\1\1\2\0\1\11\3\1"+
    "\2\0\1\1\1\11\2\0\3\1\2\0\2\1\2\0"+
    "\1\1\2\0\2\1\2\0\2\1\2\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _OrgLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 74) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return WHITE_SPACE;
          }
        case 16: break;
        case 4: 
          { yybegin(YYINITIAL); return OUTLINE;
          }
        case 17: break;
        case 8: 
          { yybegin(YYINITIAL); return CODE;
          }
        case 18: break;
        case 10: 
          { yybegin(YYINITIAL); return KEYWORD;
          }
        case 19: break;
        case 12: 
          { yybegin(YYINITIAL); return DRAWER_DELIMITER;
          }
        case 20: break;
        case 14: 
          { yybegin(BLOCK); return BLOCK_START;
          }
        case 21: break;
        case 9: 
          { return BOLD;
          }
        case 22: break;
        case 3: 
          { return COMMENT;
          }
        case 23: break;
        case 1: 
          { return TEXT;
          }
        case 24: break;
        case 5: 
          { return BLOCK_CONTENT;
          }
        case 25: break;
        case 7: 
          { return UNDERLINE;
          }
        case 26: break;
        case 6: 
          { return DRAWER_CONTENT;
          }
        case 27: break;
        case 13: 
          { yybegin(YYINITIAL); return BLOCK_END;
          }
        case 28: break;
        case 11: 
          { return UNMATCHED_DELIMITER;
          }
        case 29: break;
        case 15: 
          { yybegin(PROPERTIES); return DRAWER_DELIMITER;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
